package com.sts;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.json.JSONObject;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
@RestController
public class ServiceInventoryController {
	
	
		 @GetMapping("/service_inventory")
		    public String getAlarmsData() throws IOException {
		        ClassPathResource resource = new ClassPathResource("Inventory.json");
		        InputStream inputStream = resource.getInputStream();
		        String serviceInventory = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
		        return serviceInventory;
		    }
		 
		 @GetMapping("/retail_onnet")
		    public String getretailonnet() throws IOException {
		        ClassPathResource resource = new ClassPathResource("C:\\Users\\sachin.ys\\Downloads\\sat\\rn.json");
		        InputStream inputStream = resource.getInputStream();
		        String retailOnnet = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
		        return retailOnnet;
		    }
		 @GetMapping("/retail_offnet")
		    public String getretailofnet() throws IOException {
		        ClassPathResource resource = new ClassPathResource("C:\\Users\\sachin.ys\\Downloads\\sat\\rf.json");
		        InputStream inputStream = resource.getInputStream();
		        String retailoffnet = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
		        return retailoffnet;
		    }


    

/// In a service_table and popup_info they show key error
@GetMapping("/get_zone")
public String getZoneNames() throws IOException {
    ClassPathResource resource = new ClassPathResource("Zone_data.csv");
    BufferedReader reader = new BufferedReader(new InputStreamReader(resource.getInputStream()));

    List<String> zoneNames = new ArrayList<>();

    // Skip the header line
    reader.readLine();

    String line;
    while ((line = reader.readLine()) != null) {
        String[] values = line.split(",");
        zoneNames.add(values[1]);
    }

    reader.close();

    // Convert the list to JSON using Gson
    Gson gson = new Gson();
    return gson.toJson(zoneNames);
}
//////////////////////////////////////
//These one aloso give proper result
@RestController
@RequestMapping("/alarms_table")
public class AlarmsController {

    @GetMapping(produces = "application/json")
    public String getAlarmsData() throws IOException {
        ClassPathResource resource = new ClassPathResource("alarms_data.json");
        InputStream inputStream = resource.getInputStream();
        String alarmsData = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        return alarmsData;
    }}
/////////////////////////////////////////////////////////////////////////////////////
//These one also give proper result
@RestController
@RequestMapping("/alarm_cards")
public class AlarmCardsController {
	@PostMapping
    public ResponseEntity<Object> getAlarmCards(@RequestBody DurationRequest requestData) {
        String duration = requestData.getDuration();

        if (duration.equalsIgnoreCase("24hr")) {
            System.out.println(duration);
            String response = "{\"data\":{\"event_type\":{\"communicationsAlarm\":2,\"equipmentAlarm\":0},\"impact_type\":{\"SA_NON_SERVICE_AFFECTING\":0,\"SA_SERVICE_AFFECTING\":2},\"severity\":{\"Active\":{\"critical\":0,\"major\":0,\"minor\":1},\"Clear\":{\"critical\":0,\"major\":0,\"minor\":1}}}}";
            return ResponseEntity.ok(response);
        } else if (duration.equalsIgnoreCase("1week")) {
            System.out.println(duration);
            String response = "{\"data\":{\"event_type\":{\"communicationsAlarm\":4,\"equipmentAlarm\":2},\"impact_type\":{\"SA_NON_SERVICE_AFFECTING\":1,\"SA_SERVICE_AFFECTING\":5},\"severity\":{\"Active\":{\"critical\":0,\"major\":0,\"minor\":2},\"Clear\":{\"critical\":2,\"major\":0,\"minor\":2}}}}";
            return ResponseEntity.ok(response);
        } else if (duration.equalsIgnoreCase("1month")) {
            System.out.println(duration);
            String response = "{\"data\":{\"event_type\":{\"communicationsAlarm\":2,\"equipmentAlarm\":0},\"impact_type\":{\"SA_NON_SERVICE_AFFECTING\":0,\"SA_SERVICE_AFFECTING\":2},\"severity\":{\"Active\":{\"critical\":0,\"major\":4,\"minor\":7},\"Clear\":{\"critical\":2,\"major\":0,\"minor\":2}}}}";
            return ResponseEntity.ok(response);
        } else {
            String errorMessage = "{\"error\":\"Invalid duration\"}";
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessage);
        }
    }

    public static class DurationRequest {
        private String duration;

        public String getDuration() {
            return duration;
        }

        public void setDuration(String duration) {
            this.duration = duration;
        }
    }
}
@RestController
public class InventoryController {

    public static class FilterRequest {
        private String zone;

        public String getZone() {
            return zone;
        }

        public void setZone(String zone) {
            this.zone = zone;
        }
    }

    public static class FilterResponse {
        private Set<String> sites;
        private Set<String> olts;
        private List<String> onts;

        public Set<String> getSites() {
            return sites;
        }

        public void setSites(Set<String> sites) {
            this.sites = sites;
        }

        public Set<String> getOlts() {
            return olts;
        }

        public void setOlts(Set<String> olts) {
            this.olts = olts;
        }

        public List<String> getOnts() {
            return onts;
        }

        public void setOnts(List<String> onts) {
            this.onts = onts;
        }
    }
///////////////////////////////////////////////////////
    @RestController
    @RequestMapping("/filter")
    public class FilterController {

        
           @PostMapping
       	   public JSONObject filterData(@RequestBody String zone) {
            String filePath = "C:\\Users\\sachin.ys\\Desktop\\MyTask\\BackEnd\\Inventory_data_new.csv";
            List<String[]> data = readCSV(filePath);
            JSONObject zoneJson = new JSONObject(zone);
            String selectedZone = zoneJson.getString("Zone");
            System.out.println(selectedZone);
            List<String[]> filteredData = new ArrayList<>();
            System.out.println(data);
            for (String[] row : data) {
                if (row[0].equals(selectedZone)) {
                    filteredData.add(row);
                }
            }
            List<String[]> filteredRows = new ArrayList<>();

            for (String[] row : data) {
                if (row[0].equals(selectedZone)) {
                    filteredRows.add(row);
                }
            }
            System.out.println(filteredRows);
            List<String> site = new ArrayList<>();
            List<String> olt = new ArrayList<>();
            List<String> ont = new ArrayList<>();
            for (String[] row : filteredData) {
                site.add(row[6]);
                olt.add(row[1]);
                ont.add(row[4]);
            }
            Set<String> uniqueSites = new HashSet<>(site);
            Set<String> uniqueOlts = new HashSet<>(olt);
            JSONObject resp = new JSONObject();
            resp.put("sites", new ArrayList<>(uniqueSites));
            resp.put("olts", new ArrayList<>(uniqueOlts));
            resp.put("onts", ont);
            JSONObject response = new JSONObject();
            response.put("resp", resp);
            return response;
        }

        private List<String[]> readCSV(String filePath) {
            List<String[]> data = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] row = line.split(",");
                    data.add(row);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return data;
        }
       
    }
}
}
